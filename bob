#!/bin/bash

#####
#
# Builder
# 
# Docker based cross compilation tool
#
#####


## start utils

red=`tput setaf 1`
green=`tput setaf 2`
yellow=`tput setaf 3`
blue=`tput setaf 4`
magenta=`tput setaf 5`
cyan=`tput setaf 6`
white=`tput setaf 7`
reset=`tput sgr0`

error()
{
  # was an error passed to this function?
  if [ -z "$1" ]; then
    #if not, print a standard error
    echo "[${red}DEBUG ${yellow}@ ${green}$(date +"%T")${reset}] ${red}Error occurred!${reset}"
  else
    # if so, we can print the message in an error
    echo "[${red}DEBUG ${yellow}@ ${green}$(date +"%T")${reset}] ${red}$@${reset}"
  fi
  exit 1
}

# log function
function log {
  echo "[${cyan}INFO  ${yellow}@ ${green}$(date +"%T")${reset}] $@"
}

# marker function
function marker {
  log "${yellow}===== ${blue}$@ ${yellow}=====${reset}"
}

## end utils

IMAGE="${USER}/$2"
TAG="v1"
VOLUME="$(pwd)"
VOLUME_MOUNTPOINT="/tmp/bob"

FUNCTION="$1"
shift 2;
BOB_ARGUMENTS=($@)

if [ -f "$(pwd)/.environment" ]; then
	ENV="--env-file $(pwd)/.environment"
	log "Using ${ENV}"
else
	log "Environment file not found!"
	ENV=(	--env PATH="/opt/arm-toolchain/linaro/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin" \
		--env ARCH="arm" \
		--env CROSS_COMPILE="arm-linux-gnueabihf-"
	)
		
fi

# creates a container based on an input directory and image name
function container_build {
	log "Building image: ${IMAGE}:${TAG}"
	docker build  -t "${IMAGE}:${TAG}" ${BOB_ARGUMENTS}
}

# launches a docker container.
# if extra commands are specified it launches them, otherwise it starts up bash
function container_launch {
	FOLDER="${BOB_ARGUMENTS[0]}"
	log "Launching in ${FOLDER}"
	BOB_ARGUMENTS=(${BOB_ARGUMENTS[*]:1})
	log "Args: ${BOB_ARGUMENTS}"
	if [ -n "${BOB_ARGUMENTS}" ]; then
		A_VOLUME="${VOLUME}:${VOLUME_MOUNTPOINT}"
		A_WORKDIR="${VOLUME_MOUNTPOINT}/${FOLDER}/"
		log "Running in folder: ${A_WORKDIR}"
		shift
		log "Running image: ${IMAGE}:${TAG}"
		log "Arguments: ${BOB_ARGUMENTS[*]}"
		log "Environment: ${ENV[*]}"
		log "Volume: ${VOLUME}"
		marker "${IMAGE}"
		docker run -t -i \
			${ENV[*]} \
			--workdir="${A_WORKDIR}" \
			--volume="${A_VOLUME}" \
			--user=${USER}:${USER} \
			"${IMAGE}:${TAG}" \
			${BOB_ARGUMENTS[*]}
	else
		docker run -t -i \
			${ENV[*]} \
			--workdir="${VOLUME_MOUNTPOINT}/${FOLDER}" \
			--volume="${VOLUME}:${VOLUME_MOUNTPOINT}" \
			--user=${USER}:${USER} \
			"${IMAGE}:${TAG}"
	fi
}

case "$FUNCTION" in
	create) container_build
		;;
	run) container_launch
		;;
	*)	echo "Unrecognized option: ${FUNCTION}"
		;;
esac
